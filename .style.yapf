# vim: set syntax=cfg ts=2 sw=2 sts=2 et :

##
# qubes-mgmt style
##
[style]
BASED_ON_STYLE = pep8
ALIGN_CLOSING_BRACKET_WITH_VISUAL_INDENT = False
COLUMN_LIMIT = 79
DEDENT_CLOSING_BRACKETS = True
#JOIN_MULTIPLE_LINES = False
SPACES_BEFORE_COMMENT = 2
SPLIT_PENALTY_AFTER_OPENING_BRACKET = 0
#SPLIT_PENALTY_FOR_ADDED_LINE_SPLIT = 30
SPLIT_PENALTY_FOR_ADDED_LINE_SPLIT = 0
#
JOIN_MULTIPLE_LINES = True
SPACE_BETWEEN_ENDING_COMMA_AND_CLOSING_BRACKET = True
SPLIT_BEFORE_LOGICAL_OPERATOR = True
SPLIT_PENALTY_LOGICAL_OPERATOR = 0

[pep8]
ALIGN_CLOSING_BRACKET_WITH_VISUAL_INDENT = True
BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF = False
COLUMN_LIMIT = 59
CONTINUATION_INDENT_WIDTH = 4
DEDENT_CLOSING_BRACKETS = False
I18N_COMMENT = 
I18N_FUNCTION_CALL = 
INDENT_IF_EXPR_CONTINUATION = 4
INDENT_WIDTH = 4
JOIN_MULTIPLE_LINES = True
SPACES_BEFORE_COMMENT = 2
SPACE_BETWEEN_ENDING_COMMA_AND_CLOSING_BRACKET = True
SPLIT_BEFORE_BITWISE_OPERATOR = True
SPLIT_BEFORE_LOGICAL_OPERATOR = False
SPLIT_BEFORE_NAMED_ASSIGNS = True
SPLIT_PENALTY_AFTER_OPENING_BRACKET = 30
SPLIT_PENALTY_AFTER_UNARY_OPERATOR = 10000
SPLIT_PENALTY_BITWISE_OPERATOR = 300
SPLIT_PENALTY_EXCESS_CHARACTER = 2500
SPLIT_PENALTY_FOR_ADDED_LINE_SPLIT = 30
SPLIT_PENALTY_IMPORT_NAMES = 0
SPLIT_PENALTY_LOGICAL_OPERATOR = 300

[google]
BASED_ON_STYLE = pep8
ALIGN_CLOSING_BRACKET_WITH_VISUAL_INDENT = False
COLUMN_LIMIT = 80
INDENT_WIDTH = 4
BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF = True
I18N_COMMENT = r'#\..*'
I18N_FUNCTION_CALL = ['N_', '_']
SPACE_BETWEEN_ENDING_COMMA_AND_CLOSING_BRACKET = False

[chromium]
BASED_ON_STYLE = google
INDENT_DICTIONARY_VALUE = True
INDENT_IF_EXPR_CONTINUATION = 0
INDENT_WIDTH = 2
JOIN_MULTIPLE_LINES = False

[facebook]
BASED_ON_STYLE = pep8
ALIGN_CLOSING_BRACKET_WITH_VISUAL_INDENT = False
COLUMN_LIMIT = 80
DEDENT_CLOSING_BRACKETS = True
JOIN_MULTIPLE_LINES = False
SPACES_BEFORE_COMMENT = 2
SPLIT_PENALTY_AFTER_OPENING_BRACKET = 0
SPLIT_PENALTY_FOR_ADDED_LINE_SPLIT = 30


###############################################################################

[default]

; ──────────────────────────────────────────────────────────────────────────────
; Align closing bracket with visual indentation.
;
; Default: True
; ──────────────────────────────────────────────────────────────────────────────
ALIGN_CLOSING_BRACKET_WITH_VISUAL_INDENT = True

; ──────────────────────────────────────────────────────────────────────────────
; Insert a blank line before a 'def' or 'class' immediately nested
; within another 'def' or 'class'.
; 
; For example:
; 
; class Foo:
;                    ; <------ this blank line
;   def method():
;     ...
;
; Default: False
; ──────────────────────────────────────────────────────────────────────────────
BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF = False

; ──────────────────────────────────────────────────────────────────────────────
; The column limit.
;
; Default: 79
; ──────────────────────────────────────────────────────────────────────────────
COLUMN_LIMIT = 79

; ──────────────────────────────────────────────────────────────────────────────
; Indent width used for line continuations.
;
; Default: 4
; ──────────────────────────────────────────────────────────────────────────────
CONTINUATION_INDENT_WIDTH = 4

; ──────────────────────────────────────────────────────────────────────────────
; Put closing brackets on a separate line, dedented, if the bracketed
; expression can't fit in a single line. Applies to all kinds of brackets,
; including function definitions and calls.
; 
; For example:
; 
; config = {
;   'key1': 'value1',
;   'key2': 'value2',
; }        # <--- this bracket is dedented and on a separate line
; 
; time_series = self.remote_client.query_entity_counters(
;   entity='dev3246.region1',
;   key='dns.query_latency_tcp',
;   transform=Transformation.AVERAGE(window=timedelta(seconds=60)),
;   start_ts=now()-timedelta(days=3),
;   end_ts=now(),
; )        # <--- this bracket is dedented and on a separate line
;
; Default: False
; ──────────────────────────────────────────────────────────────────────────────
DEDENT_CLOSING_BRACKETS = False

; ──────────────────────────────────────────────────────────────────────────────
; The regex for an i18n comment. The presence of this comment stops
; reformatting of that line, because the comments are required to be
; next to the string they translate.
;
; Default: (unset)
; ──────────────────────────────────────────────────────────────────────────────
I18N_COMMENT = 

; ──────────────────────────────────────────────────────────────────────────────
; The i18n function call names. The presence of this function stops
; reformattting on that line, because the string it has cannot be moved
; away from the i18n comment.
;
; Default: (unset)
; ──────────────────────────────────────────────────────────────────────────────
I18N_FUNCTION_CALL = 

; ──────────────────────────────────────────────────────────────────────────────
; Prevents an if statement's conditional expression from aligning to the
; body of the if statement.
;
; Default: 4
; ──────────────────────────────────────────────────────────────────────────────
INDENT_IF_EXPR_CONTINUATION = 4

; ──────────────────────────────────────────────────────────────────────────────
; The number of columns to use for indentation.
;
; Default: 4
; ──────────────────────────────────────────────────────────────────────────────
INDENT_WIDTH = 4

; ──────────────────────────────────────────────────────────────────────────────
; Join short lines into one line. E.g., single line 'if' statements.
;
; Default: True
; ──────────────────────────────────────────────────────────────────────────────
JOIN_MULTIPLE_LINES = True

; ──────────────────────────────────────────────────────────────────────────────
; The number of spaces required before a trailing comment.
;
; Default: 2
; ──────────────────────────────────────────────────────────────────────────────
SPACES_BEFORE_COMMENT = 2

; ──────────────────────────────────────────────────────────────────────────────
; Insert a space between the ending comma and closing bracket of a list,
; etc.
;
; Default: True
; ──────────────────────────────────────────────────────────────────────────────
SPACE_BETWEEN_ENDING_COMMA_AND_CLOSING_BRACKET = True

; ──────────────────────────────────────────────────────────────────────────────
; Set to True to prefer splitting before '&', '|' or '^' rather than after.
;
; Default: True
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_BEFORE_BITWISE_OPERATOR = True

; ──────────────────────────────────────────────────────────────────────────────
; Set to True to prefer splitting before 'and' or 'or' rather than after.
;
; Default: False
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_BEFORE_LOGICAL_OPERATOR = False

; ──────────────────────────────────────────────────────────────────────────────
; Split named assignments onto individual lines.
;
; Default: True
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_BEFORE_NAMED_ASSIGNS = True

; ──────────────────────────────────────────────────────────────────────────────
; The penalty for splitting right after the opening bracket.
;
; Default: 30
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_PENALTY_AFTER_OPENING_BRACKET = 30

; ──────────────────────────────────────────────────────────────────────────────
; The penalty for splitting the line after a unary operator.
;
; Default: 10000
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_PENALTY_AFTER_UNARY_OPERATOR = 10000

; ──────────────────────────────────────────────────────────────────────────────
; The penalty of splitting the line around the '&', '|', and '^' operators.
;
; Default: 300
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_PENALTY_BITWISE_OPERATOR = 300

; ──────────────────────────────────────────────────────────────────────────────
; The penalty for characters over the column limit.
;
; Default: 2500
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_PENALTY_EXCESS_CHARACTER = 2500

; ──────────────────────────────────────────────────────────────────────────────
; The penalty incurred by adding a line split to the unwrapped line. The
; more line splits added the higher the penalty.
;
; Default: 30
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_PENALTY_FOR_ADDED_LINE_SPLIT = 30

; ──────────────────────────────────────────────────────────────────────────────
; The penalty of splitting a list of "import as" names.
; 
; For example:
; 
;   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,
;                                                             long_argument_2,
;                                                             long_argument_3)
; 
; would reformat to something like:
; 
;   from a_very_long_or_indented_module_name_yada_yad import (
;       long_argument_1, long_argument_2, long_argument_3)
;
; Default: 0
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_PENALTY_IMPORT_NAMES = 0

; ──────────────────────────────────────────────────────────────────────────────
; The penalty of splitting the line around the 'and' and 'or' operators.
;
; Default: 300
; ──────────────────────────────────────────────────────────────────────────────
SPLIT_PENALTY_LOGICAL_OPERATOR = 300
